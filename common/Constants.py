import os
import cv2

# 1. Screen
ENLARGE_RATIO = 2.25
SCREEN_WD = int(400 * ENLARGE_RATIO)
SCREEN_HT = int(400 * ENLARGE_RATIO)
SCREEN_LENGTH = 20 * ENLARGE_RATIO
SCREEN_HEIGHT = 20 * ENLARGE_RATIO


# 2. Simulation Environment
GRAVITY = (0, -0.5)
PPM = 20.0
TARGET_FPS = 60
timeStep = 1.0 / 45
velIters = 10
posIters = 10

# 3. Objects - Walls
NUM_WALLS = 4
WALL_WIDTH = 0.5
WALL_DENSITY = 10.0
WALL_FRICTION = 1
WALL_RESTITUTION = 1


# 4. Objects - Soft Body
RADIUS = 2
SATELLITE_RADIUS = 0.15

SOFTBODY_FRICTION = 1       # Should be positive to rotate after collision
FREQUENCY = 1             # Rigidness
DAMPING_RATIO = 0           # Power decreases over time. Setting it to 0 means ideal condition

SOFTBODY_DENSITY = 1
SOFTBODY_RESTITUTION = 0    # Must be 0 to stick to wall for one side
SOFTBODYBITS = 0x0002

# 5. Data

MIN_X, MIN_Y = WALL_WIDTH, WALL_WIDTH
MAX_X, MAX_Y = SCREEN_LENGTH - WALL_WIDTH, SCREEN_HEIGHT - WALL_WIDTH

COLLISION_RANGE_BOUND = 0.2

DATA_SAVE_MODE = True
RAW_DATA_PATH = os.path.join('D:\\', 'Real-World-Softbody', 'data', 'simulation', 'raw_data')
REAL_DATA_PATH = os.path.join('D:\\', 'Real-World-Softbody', 'data', 'real_world', 'raw_data')
NUM_SEQUENCE_PER_ANIMATION = 600
NUM_INPUT_FRAMES = 3
NUM_PARTICLES = 30      # Must be an even number
"""
FORCE_LST = [1.3]
ANGLE_LST = [210]
POS_LST = [(30.9, 38.8), (30.9, 38.8), (30.9, 38.8), (30.9, 38.8), (30.9, 38.8)]

"""

FORCE_LST = [1.0, 1.15, 1.3, 1.45, 1.6]
ANGLE_LST = [180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270]  # 180 < ANGLE < 270
POS_LST = [(28.5, 37.5), (28.6, 29.0), (28.6, 30.1), (28.6, 32.5), (28.8, 29.4), (28.9, 28.1), (28.9, 28.7), (28.9, 32.0),
           (29.1, 34.7), (29.4, 30.3), (29.5, 29.2), (29.5, 38.8), (30.1, 37.2), (30.3, 36.0), (30.6, 28.6), (30.7, 41.3),
           (30.9, 29.7), (31.4, 34.8), (31.4, 41.0), (32.0, 32.7), (32.2, 32.5), (32.3, 35.8), (32.4, 34.3), (32.8, 30.7),
           (34.0, 33.9), (34.2, 33.3), (34.3, 31.8), (34.4, 33.4), (34.5, 31.2), (34.8, 40.2), (34.9, 33.8), (35.3, 36.6),
           (35.8, 39.4), (35.9, 33.3), (35.9, 35.7), (36.1, 37.7), (36.3, 31.6), (36.3, 32.2), (36.3, 32.4), (36.7, 28.2),
           (36.7, 34.6), (36.8, 30.8), (36.9, 39.6), (37.0, 37.2), (37.2, 37.2), (37.3, 29.9), (37.3, 39.9), (37.8, 29.1),
           (38.2, 31.9), (38.2, 39.8), (38.8, 41.4), (39.0, 38.0), (39.4, 31.2), (39.4, 32.1), (39.4, 38.6), (39.6, 39.8),
           (40.1, 33.7), (40.4, 33.6), (40.4, 41.1), (40.5, 28.7), (40.5, 35.1), (40.5, 41.1), (40.7, 40.8), (40.8, 34.8),
           (40.9, 38.4), (40.9, 41.2), (41.0, 37.2), (41.0, 37.5), (41.1, 32.6), (41.1, 37.0), (41.2, 38.0), (41.3, 28.0),
           (41.4, 37.3), (41.5, 34.3), (41.9, 39.3)]

NUM_ANIMATIONS = len(FORCE_LST) * len(ANGLE_LST) * len(POS_LST)

INIT_POS_MAX = MAX_X - RADIUS - SATELLITE_RADIUS - 0.25  # Subtract 0.25 for safe bound
INIT_POS_MIN = MIN_X + RADIUS + SATELLITE_RADIUS + 0.25  # Add 0.25 for safe bound

SAT_MAX = 43.8562
SAT_MIN = 1.1438

# Biased
# SAT_MAX = 48.8562
# SAT_MIN = 1.1384

TEST_CASES = [(1.0, 180, 37.8, 29.1), (1.3, 200, 38.8, 41.4), (1.6, 235, 35.8, 39.4), (1.6, 255, 36.7, 28.2), (1.6, 210, 37.3, 29.9),
              (1.45, 180, 29.5, 29.2), (1.6, 250, 31.4, 41.0), (1.0, 250, 34.5, 31.2), (1.45, 180, 40.7, 40.8), (1.6, 230, 39.6, 39.8),
              (1.45, 205, 37.2, 37.2), (1.15, 195, 40.5, 41.1), (1.3, 225, 35.3, 36.6), (1.0, 210, 32.3, 35.8), (1.3, 255, 37.0, 37.2),
              (1.3, 190, 36.7, 34.6), (1.45, 210, 36.9, 39.6), (1.45, 200, 40.5, 41.1), (1.15, 195, 30.7, 41.3), (1.3, 270, 32.2, 32.5),
              (1.3, 220, 28.5, 37.5), (1.3, 255, 41.9, 39.3), (1.6, 250, 39.4, 32.1), (1.3, 185, 38.2, 31.9), (1.3, 220, 29.4, 30.3),
              (1.3, 180, 36.1, 37.7), (1.0, 180, 30.1, 37.2), (1.45, 195, 28.8, 29.4), (1.45, 195, 31.4, 34.8), (1.45, 240, 36.3, 32.4),
              (1.6, 235, 40.4, 33.6), (1.45, 235, 32.4, 34.3), (1.15, 265, 40.5, 35.1), (1.3, 245, 28.5, 37.5), (1.45, 225, 41.1, 32.6),
              (1.0, 195, 29.5, 38.8), (1.6, 245, 40.1, 33.7), (1.15, 210, 36.9, 39.6), (1.45, 245, 40.7, 40.8), (1.15, 180, 39.0, 38.0),
              (1.45, 200, 35.3, 36.6), (1.45, 220, 30.6, 28.6), (1.15, 185, 28.9, 28.1), (1.0, 230, 30.6, 28.6), (1.6, 245, 28.9, 28.1),
              (1.45, 200, 35.9, 35.7), (1.6, 240, 41.1, 37.0), (1.6, 270, 41.5, 34.3), (1.6, 255, 28.8, 29.4), (1.15, 225, 34.9, 33.8),
              (1.0, 195, 38.8, 41.4), (1.6, 265, 41.1, 32.6), (1.45, 270, 28.9, 28.7), (1.0, 215, 40.9, 41.2), (1.0, 225, 32.0, 32.7),
              (1.0, 185, 40.9, 38.4), (1.3, 240, 35.8, 39.4), (1.0, 185, 37.8, 29.1), (1.6, 220, 29.5, 29.2), (1.6, 220, 32.8, 30.7),
              (1.15, 240, 32.2, 32.5), (1.15, 220, 40.4, 33.6), (1.15, 230, 41.0, 37.2), (1.0, 240, 30.6, 28.6), (1.6, 240, 41.3, 28.0),
              (1.45, 240, 38.2, 39.8), (1.15, 185, 36.3, 32.4), (1.3, 180, 32.3, 35.8), (1.15, 245, 32.3, 35.8), (1.0, 215, 40.4, 33.6),
              (1.0, 270, 37.2, 37.2), (1.0, 265, 39.4, 32.1), (1.15, 225, 34.8, 40.2), (1.45, 185, 40.4, 41.1), (1.0, 270, 39.0, 38.0),
              (1.45, 260, 31.4, 41.0), (1.15, 235, 34.3, 31.8), (1.45, 255, 32.3, 35.8), (1.6, 195, 34.5, 31.2), (1.15, 245, 40.1, 33.7),
              (1.3, 240, 37.3, 39.9), (1.6, 190, 34.3, 31.8), (1.15, 260, 40.5, 28.7), (1.3, 265, 34.2, 33.3), (1.3, 250, 40.1, 33.7),
              (1.0, 240, 39.4, 32.1), (1.0, 190, 38.2, 31.9), (1.15, 255, 39.4, 31.2), (1.3, 205, 28.6, 29.0), (1.3, 180, 30.1, 37.2),
              (1.3, 220, 40.8, 34.8), (1.6, 240, 40.7, 40.8), (1.15, 185, 41.0, 37.5), (1.15, 225, 39.6, 39.8), (1.0, 240, 29.1, 34.7),
              (1.15, 225, 30.7, 41.3), (1.6, 205, 36.1, 37.7), (1.3, 270, 40.9, 38.4), (1.15, 200, 30.9, 29.7), (1.45, 230, 36.8, 30.8)]

REAL_WORLD_TRAIN_CASES = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                          11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                          21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
                          31, 32, 33, 35, 36, 37, 38, 39, 40,
                          48, 49, 50,
                          51, 52, 54, 56, 57, 60, 61, 62]

REAL_WORLD_VAL_CASES = [41, 42, 43, 44, 45, 46]
REAL_WORLD_TEST_CASES = [63, 64, 66, 67, 68, 69, 70, 71, 72]
TRAIN_AND_TEST_CASES = [2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 19, 20, 24, 25, 27, 28, 30, 32, 37, 39, 45, 46, 49, 54, 57, 61, 63, 64, 66, 67, 68, 69, 70, 71, 72]
COMPARE_LENGTH = 65

# 6. Model Related
RANDOM_SEED = 1

VIDEO_WIDTH = 1800
VIDEO_HEIGHT = 900
SMALL_HEIGHT = 450
FRAME_SIZE = 860
SMALL_SIZE = 430
WALL_SIZE = int((VIDEO_HEIGHT - FRAME_SIZE) / 2)
CODEC = cv2.VideoWriter_fourcc(*'MPV4')

# 7. Color Table
COLOR_TABLE = [
    (255, 51, 153),   # HOT PINK
    (255, 204, 255),  # LIGHT PINK
    (255, 0, 0),      # RED
    (255, 200, 0),    # LIGHT ORANGE
    (255, 100, 0),    # ORANGE
    (255, 255, 170),  # LIGHT YELLOW
    (255, 255, 0),    # YELLOW
    (129, 193, 71),   # LIGHT GREEN
    (0, 255, 0),      # GREEN
    (0, 102, 0),      # DARK GREEN
    (80, 188, 223),   # SKY BLUE
    (0, 255, 255),    # EMERALD SKY BLUE
    (0, 153, 255),    # BLUE
    (0, 0, 255),      # DEEP BLUE
    (0, 0, 102),      # NAVY
    (100, 0, 255),    # PURPLE
    (255, 255, 255),  # WHITE
    (102, 51, 0),     # BROWN
    (153, 102, 51),   # LIGHT BROWN
    (204, 153, 0)     # YELLOW-ISH BROWN
]


# 7. Dictionary of Body number to Color
body_number_to_color = {}
for i in range(NUM_WALLS):
    body_number_to_color[i] = (255, 255, 255)      # Walls - Black

for i in range(NUM_WALLS, NUM_WALLS + NUM_PARTICLES):
    body_number_to_color[i] = (255, 255, 255)


"""
TEST_CASES_FOR_ORDERED = [(11, 215, 938), (10, 215, 1030), (11, 205, 951), (10.5, 195, 1071), (9.5, 240, 406), (10.5, 215, 854), (10.5, 215, 1063), (9, 195, 1123), (9.5, 215, 993), (10, 215, 784)]
TRAINED_CASES_FOR_ORDERED = [(10.5, 200, 1208), (9.5, 265, 340), (9.5, 260, 1341), (10.5, 200, 1201), (10, 205, 1031), (9.5, 210, 840), (10, 185, 612), (10, 220, 1066), (10, 220, 193)]
TEST_CASES_FOR_UNORDERED = [(9, 180, 854), (10, 200, 867), (11, 235, 655), (11, 255, 748), (11, 210, 840), (10.5, 180, 265), (11, 250, 399), (9, 250, 528), (10.5, 180, 1078),
                            (11, 230, 1028), (10.5, 205, 837), (9.5, 195, 1071), (10, 225, 612), (9, 210, 442), (10, 255, 806), (10, 190, 776), (10.5, 210, 793), (10.5, 200, 1071),
                            (9.5, 195, 340), (10, 270, 406), (10, 220, 5), (10, 255, 1355), (11, 250, 951), (10, 185, 857), (10, 220, 253), (10, 180, 676), (9, 180, 290),
                            (10.5, 195, 193), (10.5, 195, 396), (10.5, 240, 702), (11, 235, 1031), (10.5, 235, 464), (9.5, 265, 1066), (10, 245, 5), (10.5, 225, 1206),
                            (9, 195, 289), (11, 245, 1030), (9.5, 210, 793), (10.5, 245, 1078), (9.5, 180, 869), (10.5, 200, 612), (10.5, 220, 316), (9.5, 185, 213),
                            (9, 230, 316), (11, 245, 213), (10.5, 200, 673), (11, 240, 1208), (11, 270, 1341), (11, 255, 193), (9.5, 225, 569)]

TRAINED_CASES_FOR_UNORDERED = [(11, 270, 501), (9, 270, 854), (10, 240, 528), (11, 180, 784), (9, 225, 776), (11, 265, 859), (11, 255, 518), (11, 230, 612)]
REAL_WORLD_TEST_CASES = [21, 22, 23, 25, 26, 27]

SAT_MAX = 24.7063
SAT_MIN = 1.2938
"""
