import os

# 1. Screen
ENLARGE_RATIO = 2.25
SCREEN_WD = int(400 * ENLARGE_RATIO)
SCREEN_HT = int(400 * ENLARGE_RATIO)
SCREEN_LENGTH = 20 * ENLARGE_RATIO
SCREEN_HEIGHT = 20 * ENLARGE_RATIO

# 2. Simulation Environment
GRAVITY = (0, -0.5)
PPM = 20.0
TARGET_FPS = 60
timeStep = 1.0 / 45
velIters = 10
posIters = 10

# 3. Objects - Walls
NUM_WALLS = 4
WALL_WIDTH = 0.5
WALL_DENSITY = 10.0
WALL_FRICTION = 1
WALL_RESTITUTION = 1


# 4. Objects - Soft Body
RADIUS = 2
SATELLITE_RADIUS = 0.15

SOFTBODY_FRICTION = 1
FREQUENCY = 1
DAMPING_RATIO = 0
SOFTBODY_DENSITY = 1
SOFTBODY_RESTITUTION = 0
SOFTBODYBITS = 0x0002

# 5. Data
DATA_SAVE_MODE = False
COLLISION_RANGE_BOUND = 0.2
MIN_X, MIN_Y = WALL_WIDTH, WALL_WIDTH
MAX_X, MAX_Y = SCREEN_LENGTH - WALL_WIDTH, SCREEN_HEIGHT - WALL_WIDTH
SAT_MAX = 43.8562
SAT_MIN = 1.1438

NUM_SEQUENCE_PER_ANIMATION = 600
NUM_PARTICLES = 30             # Must be an even number
SIM_DATA_PATH = os.path.join('..', 'data', 'simulation', 'raw_data')
REAL_DATA_PATH = os.path.join('..', 'data', 'real_world', 'raw_data')

FORCE_LST = [1.0, 1.15, 1.3, 1.45, 1.6]
ANGLE_LST = [180, 185, 190, 195, 200, 205, 210, 215, 220, 225, 230, 235, 240, 245, 250, 255, 260, 265, 270]  # 180 < ANGLE < 270
POS_LST = [(28.5, 37.5), (28.6, 29.0), (28.6, 30.1), (28.6, 32.5), (28.8, 29.4), (28.9, 28.1), (28.9, 28.7), (28.9, 32.0),
           (29.1, 34.7), (29.4, 30.3), (29.5, 29.2), (29.5, 38.8), (30.1, 37.2), (30.3, 36.0), (30.6, 28.6), (30.7, 41.3),
           (30.9, 29.7), (31.4, 34.8), (31.4, 41.0), (32.0, 32.7), (32.2, 32.5), (32.3, 35.8), (32.4, 34.3), (32.8, 30.7),
           (34.0, 33.9), (34.2, 33.3), (34.3, 31.8), (34.4, 33.4), (34.5, 31.2), (34.8, 40.2), (34.9, 33.8), (35.3, 36.6),
           (35.8, 39.4), (35.9, 33.3), (35.9, 35.7), (36.1, 37.7), (36.3, 31.6), (36.3, 32.2), (36.3, 32.4), (36.7, 28.2),
           (36.7, 34.6), (36.8, 30.8), (36.9, 39.6), (37.0, 37.2), (37.2, 37.2), (37.3, 29.9), (37.3, 39.9), (37.8, 29.1),
           (38.2, 31.9), (38.2, 39.8), (38.8, 41.4), (39.0, 38.0), (39.4, 31.2), (39.4, 32.1), (39.4, 38.6), (39.6, 39.8),
           (40.1, 33.7), (40.4, 33.6), (40.4, 41.1), (40.5, 28.7), (40.5, 35.1), (40.5, 41.1), (40.7, 40.8), (40.8, 34.8),
           (40.9, 38.4), (40.9, 41.2), (41.0, 37.2), (41.0, 37.5), (41.1, 32.6), (41.1, 37.0), (41.2, 38.0), (41.3, 28.0),
           (41.4, 37.3), (41.5, 34.3), (41.9, 39.3)]

SIM_DATA_EVAL_CASES = [(1.3, 195, 39.5, 29.5), (1.45, 255, 37.5, 34.8), (1.15, 195, 38.9, 30.1), (1.3, 215, 30.2, 28.9), (1.3, 180, 28.5, 29.3),
                       (1.45, 210, 38.1, 31.1), (1.45, 255, 40.5, 32.9), (1.0, 205, 34.6, 42.0), (1.0, 230, 39.7, 31.6), (1.3, 225, 39.5, 29.5),
                       (1.45, 215, 37.8, 38.4), (1.45, 205, 37.1, 32.5), (1.45, 260, 30.2, 28.9), (1.45, 185, 35.2, 28.6), (1.6, 270, 41.9, 31.7),
                       (1.45, 205, 31.1, 30.0), (1.6, 215, 28.4, 41.2), (1.6, 180, 37.5, 35.8), (1.6, 200, 39.8, 39.6), (1.6, 245, 38.9, 30.1),
                       (1.3, 245, 36.4, 39.2), (1.6, 230, 38.6, 29.7), (1.6, 180, 32.6, 33.9), (1.15, 265, 41.9, 31.7), (1.15, 190, 40.5, 32.9),
                       (1.3, 185, 29.8, 28.1), (1.0, 180, 38.5, 40.4), (1.0, 220, 33.3, 39.1), (1.3, 195, 31.5, 36.8), (1.15, 205, 33.4, 30.6),
                       (1.6, 205, 33.9, 41.0), (1.45, 255, 30.4, 29.8), (1.0, 225, 37.5, 35.8), (1.3, 195, 33.4, 30.6), (1.0, 215, 28.5, 29.3),
                       (1.6, 250, 32.6, 30.4), (1.6, 180, 37.7, 33.4), (1.6, 230, 38.1, 31.1), (1.0, 225, 30.5, 28.5), (1.15, 185, 35.2, 28.6),
                       (1.0, 190, 35.2, 28.6), (1.3, 205, 38.0, 39.8), (1.0, 265, 28.6, 41.3), (1.45, 205, 39.8, 33.3), (1.3, 195, 32.1, 30.8),
                       (1.6, 245, 31.8, 28.9), (1.45, 195, 37.5, 35.8), (1.3, 260, 39.5, 29.5), (1.0, 230, 37.8, 38.4), (1.3, 180, 31.0, 37.3),
                       (1.15, 220, 30.0, 33.8), (1.6, 255, 40.2, 38.7), (1.15, 190, 28.8, 31.3), (1.0, 200, 31.1, 30.0), (1.3, 230, 39.7, 31.6),
                       (1.3, 195, 34.6, 42.0), (1.6, 265, 30.2, 28.9), (1.3, 185, 37.9, 33.9), (1.0, 240, 30.6, 35.8), (1.15, 230, 30.4, 29.8)]

REAL_DATA_EVAL_CASES = [i for i in range(40)]

NUM_ANIMATIONS = len(FORCE_LST) * len(ANGLE_LST) * len(POS_LST)
SIM_DATA_OFFSET = 4
REAL_DATA_OFFSET = 2

# 6. Dictionary of Body number to Color
body_number_to_color = {}
for i in range(NUM_WALLS):
    body_number_to_color[i] = (255, 255, 255)         # Walls - Black

for i in range(NUM_WALLS, NUM_WALLS + NUM_PARTICLES): # Particles - White
    body_number_to_color[i] = (255, 255, 255)
